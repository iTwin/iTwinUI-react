---
import * as React from 'react';

const randomInRange = (min: number, max: number) => {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

// const getLightObject = (count: number) => {
//   const backgroundColor = `var(--color-highlight-${randomInRange(1, 3)}`;
//   const duration = randomInRange(18, 20);
//   const delay = randomInRange(2, 16);
//   const x = randomInRange(-4,4);
//   const y = randomInRange(5,8);
//   const scale = Math.random() / 10;
//   const top = randomInRange(2,10);
//   return (<div class='light-object' style={`background-color: ${backgroundColor}; --duration:${duration}; --delay: ${delay}; --x: ${x}; --y: ${y}; --scale: ${scale}, --top-position: ${top}`}></div>);
// }
---

<div class='lights'>
  <div
    class='light-object'
    style={`background-color: var(--color-highlight-${randomInRange(1, 3)});--duration:
    ${randomInRange(18, 20)}; --delay: ${randomInRange(2, 16)}; --x: ${randomInRange(
      -4,
      4
    )}; --y: ${randomInRange(5, 8)}; --scale: ${Math.random() / 10}, --top-position: 6`}
  >
  </div>
  <div
    class='light-object'
    style={`background-color: var(--color-highlight-${randomInRange(1, 3)});--duration:
    ${randomInRange(18, 20)}; --delay: ${randomInRange(2, 16)}; --x: ${randomInRange(
      -4,
      4
    )}; --y: ${randomInRange(5, 8)}; --scale: ${Math.random() / 10}`}
  >
  </div>
  <div
    class='light-object'
    style={`background-color: var(--color-highlight-${randomInRange(1, 3)});--duration:
    ${randomInRange(18, 20)}; --delay: ${randomInRange(2, 16)}; --x: ${randomInRange(
      -4,
      4
    )}; --y: ${randomInRange(5, 8)}; --scale: ${Math.random() / 10}`}
  >
  </div>
  <div
    class='light-object'
    style={`background-color: var(--color-highlight-${randomInRange(1, 3)});--duration:
    ${randomInRange(18, 20)}; --delay: ${randomInRange(2, 16)}; --x: ${randomInRange(
      -4,
      4
    )}; --y: ${randomInRange(5, 8)}; --scale: ${Math.random() / 10}`}
  >
  </div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div
    class='light-object'
    style={`background-color: var(--color-highlight-${randomInRange(1, 3)});--duration:
    ${randomInRange(18, 20)}; --delay: ${randomInRange(2, 16)}; --x: ${randomInRange(
      -4,
      4
    )}; --y: ${randomInRange(5, 8)}; --scale: ${Math.random() / 10}`}
  >
  </div>
  <div
    class='light-object'
    style={`background-color: var(--color-highlight-${randomInRange(1, 3)});--duration:
    ${randomInRange(18, 20)}; --delay: ${randomInRange(2, 16)}; --x: ${randomInRange(
      -4,
      4
    )}; --y: ${randomInRange(5, 8)}; --scale: ${Math.random() / 10}`}
  >
  </div>
  <div
    class='light-object'
    style={`background-color: var(--color-highlight-${randomInRange(1, 3)});--duration:
    ${randomInRange(18, 20)}; --delay: ${randomInRange(2, 16)}; --x: ${randomInRange(
      -4,
      4
    )}; --y: ${randomInRange(5, 8)}; --scale: ${Math.random() / 10}`}
  >
  </div>
  <div
    class='light-object'
    style={`background-color: var(--color-highlight-${randomInRange(1, 3)});--duration:
    ${randomInRange(18, 20)}; --delay: ${randomInRange(2, 16)}; --x: ${randomInRange(
      -4,
      4
    )}; --y: ${randomInRange(5, 8)}; --scale: ${Math.random() / 10}`}
  >
  </div>
</div>

<style lang='scss'>
  .lights {
    z-index: -1;
    padding-top: 50px;
    width: 100%;
    height: 70%;
    overflow: hidden;
    position: absolute;
    left: 0;
    top: 5%;
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    filter: blur(75px);
  }

  .light-object {
    width: 100px;
    height: 100px;
    --up: calc(var(--y, 10) * 2vmax);
    --left: calc(var(--x, 2) * 2vmax);

    clip-path: polygon(25% 5%, 75% 5%, 100% 50%, 75% 95%, 25% 95%, 0% 50%);
    background-size: 100% 40vmax;
    background-position: center bottom;
    background-repeat: no-repeat;
    top: var(--top-position, 3);
    transform: translate(var(--left), var(--up));
    animation: shift calc(var(--duration, 20) * 1s) calc(var(--delay, 0) * -1s) infinite ease;
  }

  @keyframes shift {
    50% {
      transform: translate(var(--x), var(--y)) scale(var(--scale));
    }
  }

  @media (min-width: 50em) {
  }
</style>
